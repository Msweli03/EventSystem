@page "/manage-events"
@using EventSystem.Data
@using EventSystem.Models
@using Microsoft.EntityFrameworkCore
@inject ApplicationDbContext DbContext
@inject NavigationManager Navigation
@inject IJSRuntime JS

<h3>Manage Events</h3>

<button class="btn btn-primary" @onclick="CreateNewEvent">Create New Event</button>

@if (events == null)
{
    <p>Loading events...</p>
}
else if (!events.Any())
{
    <p>No events found.</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Date</th>
                <th>Seats Available</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var ev in events)
            {
                <tr>
                    <td>@ev.Name</td>
                    <td>@ev.Date.ToShortDateString()</td>
                    <td>@ev.SeatsAvailable</td>
                    <td>
                        <button class="btn btn-info" @onclick="() => EditEvent(ev.Id)">Edit</button>
                        <button class="btn btn-danger" @onclick="() => ConfirmDelete(ev.Id, ev.Name)">Delete</button>
                        <button class="btn btn-secondary" @onclick="() => ViewEvent(ev.Id)">View</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Event> events;

    protected override async Task OnInitializedAsync()
    {
        events = await DbContext.Events.ToListAsync();
    }

    private void CreateNewEvent()
    {
        Navigation.NavigateTo("/edit-event");
    }

    private void EditEvent(int eventId)
    {
        Navigation.NavigateTo($"/change-event/{eventId}");
    }

    private void ViewEvent(int eventId)
    {
        Navigation.NavigateTo($"/view-event/{eventId}");
    }

    private async Task ConfirmDelete(int eventId, string eventName)
    {
        // Show the confirmation dialog with the event name
        var confirmed = await JS.InvokeAsync<bool>("confirmDelete", eventName);

        // If the user confirms, proceed with the deletion
        if (confirmed)
        {
            await DeleteEvent(eventId);
        }
    }

    private async Task DeleteEvent(int eventId)
    {
        var eventToDelete = await DbContext.Events.FindAsync(eventId);
        if (eventToDelete != null)
        {
            DbContext.Events.Remove(eventToDelete);
            await DbContext.SaveChangesAsync();
            events = await DbContext.Events.ToListAsync();
        }
    }
}
