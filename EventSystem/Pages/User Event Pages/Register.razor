@page "/register/{EventId:int}"
@using EventSystem.Data
@using EventSystem.Models
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.Authorization
@inject ApplicationDbContext DbContext
@inject NavigationManager Navigation
@inject UserManager<IdentityUser> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<style>
    .btn-success {
        background-color: #5bc0de; /* Light blue color */
        border-color: #46b8da; /* Slightly darker shade of blue */
    }

        .btn-success:hover {
            background-color: #31b0d5; /* Lighter blue on hover */
            border-color: #269abc; /* Slightly darker shade of blue on hover */
        }

    .btn-danger {
        background-color: #d9534f; /* Red color */
        border-color: #d43f3a; /* Slightly darker red */
    }

        .btn-danger:hover {
            background-color: #c9302c; /* Darker red on hover */
            border-color: #ac2925; /* Slightly darker red on hover */
        }

    .card {
        border-color: #5bc0de; /* Light blue color */
    }

    .card-body {
        padding: 1.25rem;
    }

    h3 {
        color: #5bc0de; /* Light blue color */
    }

    /* Custom styling for input field */
    .small-input {
        width: 250px; /* Adjust the width as needed */
    }
</style>

<h3>Register for Event</h3>

@if (Event != null)
{
    <div>
        <h4>@Event.Name</h4>
        <p>@Event.Description</p> <!-- Added event description here -->
        <p>Date: @Event.Date.ToShortDateString()</p>
        <p>Seats Available: @Event.SeatsAvailable</p>

        @if (isRegistered)
        {
            <p>You are already registered for this event.</p>
            <button class="btn btn-danger" @onclick="CancelRegistration">Cancel Registration</button>
        }
        else if (Event.SeatsAvailable > 0)
        {
            <EditForm Model="this">
                <div class="form-group">
                    <label for="emailAddress">Email Address</label>
                    <InputText id="emailAddress" @bind-Value="EmailAddress" class="form-control small-input" />
                </div>
                <button type="submit" class="btn btn-success" @onclick="RegisterForEvent">Book Seat</button>
            </EditForm>
        }
        else
        {
            <p>No seats available.</p>
        }
    </div>
}
else
{
    <p>Loading event details...</p>
}

@code {
    [Parameter] public int EventId { get; set; }
    private Event Event { get; set; }
    private bool isRegistered;
    private string EmailAddress { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadEventData();
    }

    private async Task LoadEventData()
    {
        try
        {
            Event = await DbContext.Events.Include(e => e.Registrations)
                                         .FirstOrDefaultAsync(e => e.Id == EventId);

            if (Event == null)
            {
                Console.WriteLine("Error: Event not found.");
                return;
            }

            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;
            var userId = UserManager.GetUserId(user);

            if (userId != null)
            {
                isRegistered = await DbContext.Registrations.AnyAsync(r => r.EventId == EventId && r.UserId == userId);
            }
            else
            {
                Console.WriteLine("Error: User not authenticated.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error initializing event details: {ex.Message}");
        }
    }

    private async Task RegisterForEvent()
    {
        try
        {
            if (Event == null)
            {
                Console.WriteLine("Error: Event is null.");
                return;
            }

            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;
            var userId = UserManager.GetUserId(user);

            if (Event.SeatsAvailable > 0 && !isRegistered && userId != null)
            {
                var registration = new Registration
                    {
                        EventId = EventId,
                        UserId = userId,
                        ReferenceNumber = Guid.NewGuid().ToString(),
                        EmailAddress = EmailAddress // Set the email address here
                    };

                Event.SeatsAvailable--;
                DbContext.Registrations.Add(registration);
                DbContext.Events.Update(Event);
                await DbContext.SaveChangesAsync();

                isRegistered = true;
                Console.WriteLine("Successfully registered for the event.");

                // Reload the page to update the UI
                await LoadEventData();
            }
            else
            {
                Console.WriteLine("Error: Seats unavailable or user not authenticated.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error registering for event: {ex.Message}");
        }
    }

    private async Task CancelRegistration()
    {
        try
        {
            if (Event == null)
            {
                Console.WriteLine("Error: Event is null.");
                return;
            }

            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;
            var userId = UserManager.GetUserId(user);

            var registration = await DbContext.Registrations
                .FirstOrDefaultAsync(r => r.EventId == EventId && r.UserId == userId);

            if (registration != null)
            {
                Event.SeatsAvailable++;
                DbContext.Registrations.Remove(registration);
                DbContext.Events.Update(Event);
                await DbContext.SaveChangesAsync();

                isRegistered = false;
                Console.WriteLine("Registration cancelled successfully.");

                // Reload the page to update the UI
                await LoadEventData();
            }
            else
            {
                Console.WriteLine("Error: Registration not found.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error cancelling registration: {ex.Message}");
        }
    }
}
