@page "/edit-event/{Id:int?}"
@using EventSystem.Data
@using EventSystem.Models
@inject ApplicationDbContext DbContext
@inject NavigationManager Navigation

<h3>@(Event.Id == 0 ? "Create Event" : "Update Event")</h3>

<EditForm Model="Event" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="name">Name:</label>
        <InputText id="name" class="form-control" @bind-Value="Event.Name" />
    </div>
    <div class="form-group">
        <label for="date">Date:</label>
        <InputDate id="date" class="form-control" @bind-Value="Event.Date" />
    </div>
    <div class="form-group">
        <label for="totalSeats">Total Seats:</label>
        <InputNumber id="totalSeats" class="form-control" @bind-Value="Event.TotalSeats" />
    </div>

    <button type="submit" class="btn btn-primary">Save</button>
    <a class="btn btn-secondary" href="/events">Back to List</a>
</EditForm>

@code {
    [Parameter] public int? Id { get; set; }
    private Event Event { get; set; } = new Event();

    protected override async Task OnInitializedAsync()
    {
        if (Id.HasValue)
        {
            Event = await DbContext.Events.FindAsync(Id.Value);
            if (Event == null)
            {
                Event = new Event(); // Initialize if not found
            }
        }
    }

    private async Task HandleValidSubmit()
    {
        if (Event.Id == 0)
        {
            Event.SeatsAvailable = Event.TotalSeats; // Initialize SeatsAvailable when creating a new event
            DbContext.Events.Add(Event);
        }
        else
        {
            DbContext.Events.Update(Event);
        }
        await DbContext.SaveChangesAsync();
        Navigation.NavigateTo("/events");
    }
}
